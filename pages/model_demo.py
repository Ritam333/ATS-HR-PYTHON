# -*- coding: utf-8 -*-
"""model_demo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16dsWTXaIM3zzKh7eF_p473d0YyoP4llb
"""

pip install PyMuPDF

from google.colab import files
uploaded=files.upload()

#extract text

import fitz
def extract_text_from_pdf(file_path):
  text=""
  with fitz.open(file_path) as doc:
    for page in doc:
      text+=page.get_text()
  return text

file_name=list(uploaded.keys())[0]
extracted_text=extract_text_from_pdf(file_name)
print(extracted_text[:10000])

#clean text

import re

def clean_text(text: str) -> str:
    text = text.lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)  # remove special characters
    text = re.sub(r'\s+', ' ', text).strip()    # normalize spaces
    return text

cleaned_text=clean_text(extracted_text)
print(cleaned_text[:10000])

# Job Description: Directly as text
job_description_text = """
We are looking for a Junior Data Analyst to join our team in Kolkata.
The ideal candidate should have around 0 years of experience.
Candidates must be proficient in Power BI, Machine Learning, SQL, Python.
As a Junior Data Analyst, you will assist in data preparation, analysis, and dashboard creation to support business decision-making.

"""


cleaned_jd_text = clean_text(job_description_text)

#for text embedding

!pip install sentence-transformers

from sentence_transformers import SentenceTransformer

def load_embedding_model(model_name="all-MiniLm-L6-V2"):
  model=SentenceTransformer(model_name)
  return model

def get_text_embedding(text: str,model)->list:
  embedding=model.encode(text)
  return embedding

model = load_embedding_model()
resume_text = clean_text(extracted_text)
jd_text = clean_text(job_description_text)

resume_embedding = model.encode(resume_text)
jd_embedding = model.encode(jd_text)

print(resume_embedding[:5])



#Cosine Similarity





from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
import numpy as np
import re

# Load the embedding model once
model = SentenceTransformer('all-MiniLM-L6-v2')

# --- Helper Functions ---

def extract_skills(text, skill_list):
    text = text.lower()
    return {skill for skill in skill_list if skill.lower() in text}

def extract_experience(text):
    match = re.search(r'(\d+)\+?\s+years', text.lower())
    return int(match.group(1)) if match else 0

def check_education(text, required_education_keywords):
    text = text.lower()
    for edu in required_education_keywords:
        if edu.lower() in text:
            return 1
    return 0

def check_location(text, preferred_locations):
    text = text.lower()
    for loc in preferred_locations:
        if loc.lower() in text:
            return 1
    return 0

# --- Main ATS Scoring Function ---

def calculate_ats_score(resume_text, jd_text,
                        expected_skills,
                        required_experience,
                        required_education_keywords,
                        preferred_locations):

    # Cosine Similarity
    resume_embedding = model.encode(resume_text)
    jd_embedding = model.encode(jd_text)
    cosine_score = cosine_similarity(
        np.array(resume_embedding).reshape(1, -1),
        np.array(jd_embedding).reshape(1, -1)
    )[0][0]  # range: 0 to 1

    # Skill Matching
    resume_skills = extract_skills(resume_text, expected_skills)
    skill_score = len(resume_skills) / len(expected_skills) if expected_skills else 0

    # Experience Matching
    resume_exp = extract_experience(resume_text)
    exp_score = min(resume_exp / required_experience, 1) if required_experience else 0

    # Education & Location Matching
    education_match = check_education(resume_text, required_education_keywords)
    location_match = check_location(resume_text, preferred_locations)

    # Weighted Final Score (0 to 100)
    final_score = (
        (cosine_score * 0.5) +
        (skill_score * 0.2) +
        (exp_score * 0.1) +
        (education_match * 0.1) +
        (location_match * 0.1)
    ) * 100

    return round(final_score, 2), {
        "cosine_similarity": round(cosine_score, 2),
        "skills_matched": list(resume_skills),
        "experience_years": resume_exp,
        "education_matched": bool(education_match),
        "location_matched": bool(location_match)
    }

resume_text = cleaned_text

jd_text = """
We are hiring a Junior Data Analyst to join our team in Kolkata.
The candidate should have strong skills in Python, SQL, and Power BI, with 0â€“1 years of experience.
Responsibilities include assisting with data collection, preprocessing, visualization, and dashboarding.
Preferred educational background includes B.Tech or B.Sc in a relevant field.
Remote candidates within India are also encouraged to apply.
"""

expected_skills = ["Python", "SQL", "Power BI"]
required_experience = 1
required_education_keywords = ["b.tech", "b.sc"," Master of Computer Applications"]
preferred_locations = ["kolkata", "remote"]

score, details = calculate_ats_score(
    resume_text, jd_text,
    expected_skills,
    required_experience,
    required_education_keywords,
    preferred_locations
)

print("ATS Score:", score)
print("Details:", details)

